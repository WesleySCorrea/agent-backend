package com.dev.agent.controller;

import com.dev.agent.entity.CommandHistory;
import com.dev.agent.enums.StatusEnum;
import com.dev.agent.services.CommandHistoryService;
import io.minio.MinioClient;
import io.minio.PutObjectArgs;
import io.minio.MakeBucketArgs;
import io.minio.BucketExistsArgs;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.web.server.ResponseStatusException;

import java.util.Map;
import java.util.HashMap;
import java.nio.file.Paths;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/agent")
public class SendController {

    private final MinioClient minioClient;

    @PostMapping("/upload")
    public ResponseEntity<String> uploadFile(@RequestParam("file") MultipartFile file) {
        try {
            ensureBucketExists(bucketName);

            String fileName = extractFileName(file);
            uploadToBucket(file, bucketName, fileName);

            String url = generatePresignedUrl(bucketName, fileName, 3600);

            return ResponseEntity.ok(url);
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Erro no upload: " + e.getMessage());
        }
    }

    private void ensureBucketExists(String bucket) throws Exception {
        boolean found = minioClient.bucketExists(
                BucketExistsArgs.builder().bucket(bucket).build()
        );
        if (!found) {
            minioClient.makeBucket(MakeBucketArgs.builder().bucket(bucket).build());
        }
    }

    private String extractFileName(MultipartFile file) {
        return Paths.get(file.getOriginalFilename())
                .getFileName()
                .toString();
    }

    private void uploadToBucket(MultipartFile file, String bucket, String objectName) throws Exception {
        minioClient.putObject(
                PutObjectArgs.builder()
                        .bucket(bucket)
                        .object(objectName)
                        .stream(file.getInputStream(), file.getSize(), -1)
                        .contentType(file.getContentType())
                        .build()
        );
    }

    private String generatePresignedUrl(String bucket, String objectName, int expirySeconds) throws Exception {
        return minioClient.getPresignedObjectUrl(
                io.minio.GetPresignedObjectUrlArgs.builder()
                        .method(io.minio.http.Method.GET)
                        .bucket(bucket)
                        .object(objectName)
                        .expiry(expirySeconds)
                        .build()
        );
    }
}